name: build

on: [ push, pull_request ]

jobs:

  build:
    name: Build
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # https://docs.github.com/ja/actions/using-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
        os: [ ubuntu-20.04, ubuntu-22.04, ubuntu-latest, macos-11, macos-12, macos-13, macos-latest, windows-2019, windows-2022, windows-latest ]
        go: [ '1.20' ]
    steps:

    - uses: actions/setup-go@6edd4406fa81c3da01a34fa6f6343087c207a568 # v3.5.0
      with:
        go-version: ${{ matrix.go }}
        check-latest: true

    - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3

    - run: go test

    - run: go build -ldflags "-X main.version=2.2.0-dev" fmcsadmin.go

    - shell: bash
      run: echo "goss_commit_hash=592be239279ccb18e71a0f7b90abdf4a9091294b" >> "$GITHUB_ENV" # v0.4.0-dev

    - if: runner.os == 'macOS' || runner.os == 'Windows'
      shell: bash
      run: echo "GOSS_USE_ALPHA=1" >> "$GITHUB_ENV"

    - if: runner.os == 'Linux' || runner.os == 'macOS'
      run: |
           curl -L "https://github.com/goss-org/goss/archive/${{ env.goss_commit_hash }}.tar.gz" -o goss.tar.gz
           tar xzvf goss.tar.gz
           cd "goss-${{ env.goss_commit_hash }}"
           make build
           cd ..

    - if: runner.os == 'Windows'
      shell: bash
      run: |
           curl -L "https://github.com/goss-org/goss/archive/${{ env.goss_commit_hash }}.tar.gz" -o goss.tar.gz
           tar xzvf goss.tar.gz
           cd "goss-${{ env.goss_commit_hash }}"
           go build -o goss.exe github.com/goss-org/goss/cmd/goss
           cd ..

    - if: runner.os == 'Linux'
      run: |
           "./goss-${{ env.goss_commit_hash }}/release/goss-linux-amd64" --gossfile tests/goss.yaml validate --format documentation

    - if: runner.os == 'macOS'
      run: |
           "./goss-${{ env.goss_commit_hash }}/release/goss-alpha-darwin-amd64" --gossfile tests/goss.yaml validate --format documentation

    - if: runner.os == 'Windows'
      shell: bash
      run: |
           "./goss-${{ env.goss_commit_hash }}/goss.exe" --gossfile tests/goss-win.yaml validate --format documentation

    - run: ./fmcsadmin -v

# based on: github.com/koron-go/_skeleton/.github/workflows/go.yml
