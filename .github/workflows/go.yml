name: Build

on: [ push, pull_request ]

jobs:

  build:
    name: Build
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners
        os: [ 'ubuntu-20.04', 'ubuntu-22.04', 'ubuntu-24.04', 'ubuntu-latest', 'macos-12', 'macos-13', 'macos-14', 'macos-latest', 'windows-2019', 'windows-2022', 'windows-latest' ]
        go: [ '1.22' ]
    steps:

    - name: Setup go
      uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
      with:
        cache: false
        go-version: ${{ matrix.go }}
        check-latest: true

    - uses: actions/checkout@v4

    - run: go test

    - shell: bash
      run: echo "fmcsadmin_version=2.2.0" >> "$GITHUB_ENV"

    - run: go build -ldflags "-X main.version=${{ env.fmcsadmin_version }}" fmcsadmin.go

    - if: runner.os == 'macOS'
      run: make dist && cp -p "dist/fmcsadmin-${{ env.fmcsadmin_version }}-macos/fmcsadmin" .

    - if: runner.os == 'Linux' && matrix.os == 'ubuntu-22.04'
      run: make build-linux-arm64

    - shell: bash
      run: echo "goss_commit_hash=aed56336c3e8ff683e9540065b502f423dd6760d" >> "$GITHUB_ENV" # v0.4.8

    - if: runner.os == 'macOS' || runner.os == 'Windows'
      shell: bash
      run: echo "GOSS_USE_ALPHA=1" >> "$GITHUB_ENV"

    - if: runner.os == 'Linux'
      name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN_202506 }}

    - if: runner.os == 'Linux'
      name: Pull from GitHub Container Registry
      run: |
           docker pull --platform=linux/amd64 ghcr.io/matsuo/goss:latest
           docker run --platform=linux/amd64 --rm -i -v /$(pwd):/tmp ghcr.io/matsuo/goss:latest bash <<'EOF'
           cd /root/go/src/github.com/goss-org/goss
           cp ./release/goss-darwin-amd64 /tmp/goss-darwin-amd64
           cp ./release/goss-darwin-arm64 /tmp/goss-darwin-arm64
           cp ./release/goss-linux-amd64 /tmp/goss-linux-amd64
           cp ./release/goss-linux-arm64 /tmp/goss-linux-arm64
           EOF

    - if: runner.os == 'macOS'
      run: |
           curl -L "https://github.com/goss-org/goss/archive/${{ env.goss_commit_hash }}.tar.gz" -o goss.tar.gz
           tar xzvf goss.tar.gz
           cd "goss-${{ env.goss_commit_hash }}"
           make build
           cd ..

    - if: runner.os == 'Windows'
      shell: bash
      run: |
           curl -L "https://github.com/goss-org/goss/archive/${{ env.goss_commit_hash }}.tar.gz" -o goss.tar.gz
           tar xzvf goss.tar.gz
           cd "goss-${{ env.goss_commit_hash }}"
           go build -o goss-windows-amd64.exe github.com/goss-org/goss/cmd/goss
           mkdir release
           mv goss-windows-amd64.exe release/
           cd ..

    - if: runner.os == 'Linux'
      run: |
           ./goss-linux-amd64 --version
           OS=linux ./goss-linux-amd64 --gossfile tests/goss.yaml validate --format documentation

    - if: runner.os == 'macOS'
      run: |
           OS=darwin "./goss-${{ env.goss_commit_hash }}/release/goss-darwin-amd64" --gossfile tests/goss.yaml validate --format documentation

    - if: runner.os == 'Windows'
      shell: bash
      run: |
           OS=windows "./goss-${{ env.goss_commit_hash }}/release/goss-windows-amd64.exe" --gossfile tests/goss.yaml validate --format documentation

    - run: ./fmcsadmin -v

    - if: runner.os == 'Linux' && matrix.os == 'ubuntu-22.04'
      name: Set up QEMU
      uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf # v3.2.0

    - if: runner.os == 'Linux' && matrix.os == 'ubuntu-22.04'
      run: |
           docker run --rm --env GOSS_COMMIT_HASH=${{ env.goss_commit_hash }} -i -v /$(pwd):/tmp arm64v8/ubuntu:22.04 bash <<'EOF'
           cd /tmp
           cp -p ./dist/linux-arm64/fmcsadmin ./fmcsadmin
           OS=linux "./goss-linux-arm64" --gossfile tests/goss.yaml validate --format documentation
           ./fmcsadmin -v
           EOF
